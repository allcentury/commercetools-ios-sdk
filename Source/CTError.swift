//
// Copyright (c) 2016 Commercetools. All rights reserved.
//

import Foundation

/// The `Error` struct provides a convenience for creating custom Commercetools SDK NSErrors.
public struct CTError {

    /// The domain used for creating all Commercetools errors.
    public static let Domain = "com.commercetools.error"

    /// The custom error codes generated by Commercetools.
    public enum Code: Int {
        case configurationValidationFailed       = -7000
        case accessTokenRetrievalFailed          = -7001
        case invalidJsonInputError               = -7002
        case resourceNotFoundError               = -7003
        case concurrentModificationError         = -7004
        case insufficientTokenGrantTypeError     = -7005
        case generalCommercetoolsError           = -7099

        init(code: String) {
            switch code {
            case "ConfigurationValidationFailed":
                self = .configurationValidationFailed
            case "AccessTokenRetrievalFailed":
                self = .accessTokenRetrievalFailed
            case "InvalidJsonInput":
                self = .invalidJsonInputError
            case "ResourceNotFound":
                self = .resourceNotFoundError
            case "ConcurrentModification":
                self = .concurrentModificationError
            case "insufficient_token_grant_type":
                self = .insufficientTokenGrantTypeError
            default:
                self = .generalCommercetoolsError
            }
        }
    }

    static func error(domain: String = CTError.Domain, code: Code, failureReason: String? = nil, description: String? = nil) -> NSError {
        return error(domain: domain, code: code.rawValue, failureReason: failureReason ?? "Unknown", description: description)
    }

    static func error(domain: String = CTError.Domain, code: Int, failureReason: String, description: String? = nil) -> NSError {
        var userInfo = [NSLocalizedFailureReasonErrorKey: failureReason]
        if let description = description {
            userInfo[NSLocalizedDescriptionKey] = description
        }
        return NSError(domain: domain, code: code, userInfo: userInfo)
    }
}
